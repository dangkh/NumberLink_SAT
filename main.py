# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'createSample.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import *
from ultis import *
import numpy as np
from numberLink import *
import pycosat
from PyQt5.QtGui import QPainter, QBrush


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)
        uic.loadUi('numberLink.ui', self)

        self.setObjectName("NumberLink")
        self.resize(int(700), int(350))
        widget = QtWidgets.QWidget()
        widget.setLayout(self.horizontalLayout)
        self.setCentralWidget(widget)

        self.listColor = []
        self.colors = arg.colors
        self.createEvent()

    def createEvent(self):
        self.createMatrixBtn.clicked.connect(self.genMatrix)
        self.numSizeMatrix.setMinimum(2)
        self.numSizeMatrix.setMaximum(20)
        self.mEditBtn.clicked.connect(self.editMatrix)
        self.auEditBtn.clicked.connect(self.autoEditMatrix)
        self.numberPropGroup.hide()
        self.editFrame.hide()
        self.colorSpinBox.setParent(None)
        self.colorSpinBox = textSpinBox()
        self.gridLayout_2.addWidget(self.colorSpinBox, 1, 1, 1, 1)
        self.updateBtn.clicked.connect(self.updateBtnFunc)
        self.editStt = False
        self.currentBtn = None
        self.assignedColor = [-1] * 10
        self.assignedNum = [0] * 10
        self.updateGroup.hide()
        self.finishGroup.hide()
        self.finishEditBtn.clicked.connect(self.finishEditFunc)
        self.SatBtn.clicked.connect(self.satFunc)
        self.resetBtn.clicked.connect(self.resetBtnFunc)

    def genMatrix(self):
        self.editFrame.show()
        self.sizeMatrix = self.numSizeMatrix.value()
        self.listObject = []
        for idy in range(self.sizeMatrix):
            for idx in range(self.sizeMatrix):
                newId = idy * self.sizeMatrix + idx
                newObj = sampleNumber(newId)
                newObj.setPos(idy, idx)
                newObj.pushButton.clicked.connect(lambda param1, arg1=newObj: self.updateInfo2Btn(param1, arg1))
                newObj.mouseReleaseEvent = lambda param1, arg1=newObj: self.updateInfo2Btn(param1, arg1)
                # newObj.updateStyleSheet(self.colors[newId % 30])
                self.listObject.append(newObj)
                self.gridLayout.addWidget(newObj, idy, idx)
        self.genMatrixFrame.hide()

    def editMatrix(self):
        self.testSatGroup.hide()
        self.finishGroup.show()
        self.editStt = True
        self.mEditBtn.setEnabled(False)
        self.auEditBtn.hide()

    def autoEditMatrix(self):
        print("entered")

    def updateInfo2Btn(self, event, objectI):
        if not self.editStt:
            return
        self.numberPropGroup.show()
        self.updateGroup.show()
        idy, idx = objectI.getPos()
        self.label.setText("Number Properties at: {} {}".format(idy, idx))
        self.currentBtn = objectI

    def updateBtnFunc(self):
        if self.currentBtn is None:
            return
        cl = self.colorSpinBox.value()
        num = self.numberSpinBox.value()
        if self.assignedNum[num] >= 2:
            return
        if self.assignedColor[num] == -1 or self.assignedColor[num] == cl:
            self.assignedNum[num] += 1
            self.assignedColor[num] = cl
            self.currentBtn.updateStyleSheet(self.colors[cl])
            self.currentBtn.setText(str(num))
            self.currentBtn.cl = cl
            self.currentBtn.num = num
            self.numberPropGroup.hide()
            self.updateGroup.hide()
        else:
            pass

    def resetBtnFunc(self):
        cl = self.currentBtn.cl
        num = self.currentBtn.num
        if cl == -1 or num == -1:
            return
        self.currentBtn.cl = -1
        self.currentBtn.num = -1
        self.currentBtn.resetStyleSheet()
        self.currentBtn.setText("")
        self.numberPropGroup.hide()
        self.updateGroup.hide()
        self.assignedNum[num] = max(self.assignedNum[num] - 1, 0)
        if self.assignedNum[num] == 0:
            self.assignedColor[num] = -1

    def changeEventVisual(self, btn):
        def wrap():
            self.changeObjectScreen(btn)
            if self.currentEvent is None:
                btn.setEnabled(True)
                self.setMarker(btn)
            elif self.currentEvent == btn:
                self.closeMarker(btn)
            elif btn.text() == "Resting":
                self.closeMarker(self.currentEvent)
                self.setMarker(btn)
            else:
                print("error")

    def finishEditFunc(self):
        self.finishGroup.hide()
        self.testSatGroup.show()
        self.numberPropGroup.hide()
        self.updateGroup.hide()
        self.editStt = False
        self.mEditBtn.setEnabled(True)
        self.auEditBtn.show()

    def satFunc(self):
        matrix = np.zeros([self.sizeMatrix, self.sizeMatrix])

        for obj in self.listObject:
            yy, xx = obj.getPos()
            matrix[yy][xx] = obj.num

        res = NumberLink(matrix)
        print("loaded Clauses")
        result = pycosat.solve(res.getClause())
        print("Number of Clauses: ", len(res.getClause()))
        # print(result)
        listEdge = res.getListEdge()
        print(listEdge)
        if len(listEdge) == 0:
            return
        for info in listEdge:
            [y, x, d] = info
            index = (y - 1) * self.sizeMatrix + (x - 1)
            obj = self.listObject[index]
            obj.plotLabel(d)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    # ui.setupUi()
    ui.show()
    sys.exit(app.exec_())
